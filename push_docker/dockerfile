# Stage 1: Build the Backend
FROM node:16 AS backend

# Set working directory for backend
WORKDIR /app/backend

# Copy all backend files (including package files and code) from the correct relative path

# COPY . /home/azureuser/Nginx_proxy/backend/package.json
# COPY . /home/azureuser/Nginx_proxy/backend/package-lock.json
COPY . /home/azureuser/Nginx_proxy/package.json
COPY . /home/azureuser/Nginx_proxy/package-lock.json

COPY . /home/azureuser/Nginx_proxy/backend

RUN chmod -R 755 /app/backend

# Install backend dependencies
RUN npm install
RUN npm run build  

# Stage 2: Build the Frontend
FROM node:16 AS frontend

# Set working directory for frontend
WORKDIR /app/frontend

# Copy all frontend files (including package.json, package-lock.json, etc.) from the correct relative path
COPY . /home/azureuser/Nginx_proxy/frontend
COPY . /home/azureuser/Nginx_proxy/frontend/package.json
COPY . /home/azureuser/Nginx_proxy/frontend/package-lock.json

# Copy package.json and package-lock.json from the root directory to the frontend directory
# COPY ./package.json /app//package.json
# COPY ./package-lock.json /app/frontend/package-lock.json



# Install frontend dependencies
RUN npm install
RUN npm run build 

# Stage 3: Combine Backend and Frontend in Nginx
FROM nginx:alpine

# Copy the built frontend files from the frontend stage
COPY --from=frontend /app/frontend/build /usr/share/nginx/html

# Copy the backend files (assuming API is under /api, adjust as needed)
COPY --from=backend /app/backend/dist /usr/share/nginx/html/api

# Expose port 80
EXPOSE 80

# Run Nginx to serve both frontend and backend
CMD ["nginx", "-g", "daemon off;"]
